{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dell304/Selieznov/todo React/react_typescript/src/pages/main/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TodoForm from \"../../components/TodoForm\";\nimport TodoList from \"../../components/TodoList\";\nimport TodoModal from \"../../components/TodoModal\";\nimport TodoInteraction from \"../../components/TodoInteraction\";\nimport \"./style.scss\";\n\nconst MainPage = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n  const [modalState, setModalSate] = useState(false);\n  const [modalId, setModalId] = useState(0);\n  const [currentState, setCuttrentState] = useState(\"all\");\n  const [modalTitle, setModalTitle] = useState([]);\n\n  const addHabdler = title => {\n    const task = {\n      title,\n      id: new Date().getTime(),\n      completed: false\n    };\n    setTodo(prev => {\n      return [...prev, task];\n    });\n  };\n\n  const checkHandler = id => {\n    setTodo(prev => prev.map(todoItem => {\n      if (todoItem.id === id) {\n        todoItem.completed = !todoItem.completed;\n      }\n\n      return todoItem;\n    }));\n  };\n\n  const closeModalWindow = () => {\n    setModalSate(!modalState);\n  };\n\n  const editHandler = (id, title) => {\n    setTodo(prev => prev.map(todoItem => {\n      if (todoItem.id === id) {\n        todoItem.title = title;\n      }\n\n      return todoItem;\n    }));\n\n    if (title.trim() === \"\") {\n      deleteHandler(id);\n    }\n  };\n\n  const CleanCompletedHandler = () => {\n    setTodo(prev => prev.filter(todoItem => todoItem.completed === false));\n  };\n\n  const FilterStateHandler = title => {\n    setCuttrentState(title);\n  };\n\n  const storeFiltered = (todoArr, currentStateStr) => {\n    let arrStore;\n    currentStateStr === \"all\" ? arrStore = todoArr : arrStore = todoArr.filter(item => {\n      return item.completed === (currentStateStr === \"completed\");\n    });\n    return arrStore;\n  };\n\n  const SelectAllHandler = () => {\n    const isAnyCheckFalse = todo.find(itemTdod => itemTdod.completed === false);\n\n    if (isAnyCheckFalse) {\n      setTodo(prev => prev.map(todoItem => {\n        todoItem.completed = true;\n        return todoItem;\n      }));\n    } else {\n      setTodo(prev => prev.map(todoItem => {\n        todoItem.completed = false;\n        return todoItem;\n      }));\n    }\n  };\n\n  const deleteHandler = id => {\n    closeModalWindow();\n    setModalTitle(todo.filter(todoItem => todoItem.id === id));\n    setModalId(id);\n    onButtonConfirm();\n  };\n\n  const onButtonConfirm = () => {\n    closeModalWindow(); // setTodo((prev) => prev.filter((todoItem) => todoItem.id !== modalId));\n\n    setTodo(todo.filter(todoItem => todoItem.id !== modalId));\n  };\n\n  useEffect(() => {\n    setTodo(todo);\n  }, [todo]);\n  useEffect(() => {\n    const storeArr = JSON.parse(localStorage.getItem(\"Tasks\") || \"[]\");\n    setTodo(storeArr);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"Tasks\", JSON.stringify(todo));\n  }, [todo]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n        onSubmit: addHabdler,\n        onSelectBtn: SelectAllHandler,\n        todo: todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todo: storeFiltered(todo, currentState),\n        onCheck: checkHandler,\n        onDelete: deleteHandler,\n        onEdidt: editHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), todo.length !== 0 ? /*#__PURE__*/_jsxDEV(TodoInteraction, {\n        arrItems: todo,\n        clear: CleanCompletedHandler,\n        state: currentState,\n        setFilter: FilterStateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), modalState ? /*#__PURE__*/_jsxDEV(TodoModal, {\n      onClose: closeModalWindow,\n      onConfirm: onButtonConfirm,\n      modalObj: modalTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(MainPage, \"v0GjmQuhC7KWITrSKAgCU0unu8o=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/home/dell304/Selieznov/todo React/react_typescript/src/pages/main/index.tsx"],"names":["React","useEffect","useState","TodoForm","TodoList","TodoModal","TodoInteraction","MainPage","todo","setTodo","modalState","setModalSate","modalId","setModalId","currentState","setCuttrentState","modalTitle","setModalTitle","addHabdler","title","task","id","Date","getTime","completed","prev","checkHandler","map","todoItem","closeModalWindow","editHandler","trim","deleteHandler","CleanCompletedHandler","filter","FilterStateHandler","storeFiltered","todoArr","currentStateStr","arrStore","item","SelectAllHandler","isAnyCheckFalse","find","itemTdod","onButtonConfirm","storeArr","JSON","parse","localStorage","getItem","setItem","stringify","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TodoForm from \"../../components/TodoForm\";\nimport TodoList from \"../../components/TodoList\";\nimport TodoModal from \"../../components/TodoModal\";\nimport TodoInteraction from \"../../components/TodoInteraction\";\nimport \"./style.scss\";\nimport { Task } from \"../../types/index\";\n\nconst MainPage = () => {\n  const [todo, setTodo] = useState<Task[]>([]);\n  const [modalState, setModalSate] = useState<boolean>(false);\n  const [modalId, setModalId] = useState<number>(0);\n  const [currentState, setCuttrentState] = useState<string>(\"all\");\n  const [modalTitle, setModalTitle] = useState<Task[]>([]);\n\n  const addHabdler = (title: string) => {\n    const task: Task = {\n      title,\n      id: new Date().getTime(),\n      completed: false,\n    };\n\n    setTodo((prev: Task[]) => {\n      return [...prev, task];\n    });\n  };\n\n  const checkHandler = (id: number) => {\n    setTodo((prev) =>\n      prev.map((todoItem) => {\n        if (todoItem.id === id) {\n          todoItem.completed = !todoItem.completed;\n        }\n        return todoItem;\n      })\n    );\n  };\n\n  const closeModalWindow = () => {\n    setModalSate(!modalState);\n  };\n\n  const editHandler = (id: number, title: string) => {\n    setTodo((prev) =>\n      prev.map((todoItem) => {\n        if (todoItem.id === id) {\n          todoItem.title = title;\n        }\n        return todoItem;\n      })\n    );\n    if (title.trim() === \"\") {\n      deleteHandler(id);\n    }\n  };\n\n  const CleanCompletedHandler = () => {\n    setTodo((prev) => prev.filter((todoItem) => todoItem.completed === false));\n  };\n\n  const FilterStateHandler = (title: string) => {\n    setCuttrentState(title);\n  };\n\n  const storeFiltered = (todoArr: Task[], currentStateStr: string) => {\n    let arrStore;\n    currentStateStr === \"all\"\n      ? (arrStore = todoArr)\n      : (arrStore = todoArr.filter((item) => {\n          return item.completed === (currentStateStr === \"completed\");\n        }));\n\n    return arrStore;\n  };\n\n  const SelectAllHandler = () => {\n    const isAnyCheckFalse = todo.find(\n      (itemTdod) => itemTdod.completed === false\n    );\n    if (isAnyCheckFalse) {\n      setTodo((prev) =>\n        prev.map((todoItem) => {\n          todoItem.completed = true;\n\n          return todoItem;\n        })\n      );\n    } else {\n      setTodo((prev) =>\n        prev.map((todoItem) => {\n          todoItem.completed = false;\n\n          return todoItem;\n        })\n      );\n    }\n  };\n\n  const deleteHandler = (id: number) => {\n    closeModalWindow();\n    setModalTitle(todo.filter((todoItem) => todoItem.id === id));\n    setModalId(id);\n    onButtonConfirm();\n  };\n  const onButtonConfirm = () => {\n    closeModalWindow();\n\n    // setTodo((prev) => prev.filter((todoItem) => todoItem.id !== modalId));\n    setTodo(todo.filter((todoItem) => todoItem.id !== modalId));\n  };\n\n  useEffect(() => {\n    setTodo(todo);\n  }, [todo]);\n\n  useEffect(() => {\n    const storeArr = JSON.parse(\n      localStorage.getItem(\"Tasks\") || \"[]\"\n    ) as Task[];\n    setTodo(storeArr);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"Tasks\", JSON.stringify(todo));\n  }, [todo]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Todo List</h1>\n        <TodoForm\n          onSubmit={addHabdler}\n          onSelectBtn={SelectAllHandler}\n          todo={todo}\n        />\n        <TodoList\n          todo={storeFiltered(todo, currentState)}\n          onCheck={checkHandler}\n          onDelete={deleteHandler}\n          onEdidt={editHandler}\n        />\n        {todo.length !== 0 ? (\n          <TodoInteraction\n            arrItems={todo}\n            clear={CleanCompletedHandler}\n            state={currentState}\n            setFilter={FilterStateHandler}\n          />\n        ) : null}\n      </div>\n      {modalState ? (\n        <TodoModal\n          onClose={closeModalWindow}\n          onConfirm={onButtonConfirm}\n          modalObj={modalTitle}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}